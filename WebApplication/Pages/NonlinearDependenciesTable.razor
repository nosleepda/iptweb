@page "/nonlinearDependenciesTable"
@using WebApplication.Data
@using Plotly.Blazor.Traces.ScatterLib

@inject Service Service

<h3>Nonlinear Dependencies Table</h3>

<p>
	<input @bind="XsInput" />
	<input @bind="YsInput" />
	<input type="number" @bind="a" />
</p>

<div>
	<button type="button" class="btn btn-primary" @onclick="Magic">
		Contunie
	</button>
</div>

@if (clicked)
{
	<table class="table">
		@* <thead> *@
		@* <tr> *@
		@* 	<th>Remove</th> *@
		@* 	<th>Date</th> *@
		@* 	<th>Description</th> *@
		@* 	<th>Is Complete</th> *@
		@* </tr> *@
		@* </thead> *@
		<tbody>
		@for (var i = 0; i < Ys.Length; i++)
		{
			// see https://stackoverflow.com/a/56426146/323447
			var iCopy = i;
			<tr>
				@for (var j = 0; j < Xs.Length; j++)
				{
					var jCopy = j;

					<td>
						<input type="number" id="@($"ns{i}{j}")" value="@ns[i, j]"
						       @onchange="@(e => ns[iCopy, jCopy] = e.Value.ToString())"/>
					</td>
        @* 					<label for="@($"ns{i}{j}")">@i</label> *@
@*         					<input type="number" id="@($"ns{i}{j}")" value="@ns[i, j]" *@
@*         					       @onchange="@(e => ns[iCopy, jCopy] = e.Value.ToString())"/> *@
				}
			</tr>
		}
		</tbody>
	</table>
}

<div>
	<button type="button" class="btn btn-primary" @onclick="() => CalcAndDraw(XsInput, YsInput, ns, a)">Draw</button>
</div>

<div class="" style="display: flex; justify-content: flex-start">
	<PlotlyChart style="height: 60vh; min-height: 350px; min-width: 100vh; width: 100px"
	             @bind-Config="config" @bind-Layout="layout" @ref="chart"/>
	@if (analysis != null)
	{
		<div>
			<p>Среднее значение Х: @analysis.MeanX</p>
			<p>Среднее значение Y: @analysis.MeanY</p>
			<p>Значение Sx: @analysis.Sx</p>
			<p>Значение Sy: @analysis.Sy</p>
			<p>Коэффициент корреляции: @analysis.CorrelationRatio</p>
			<p>Эмпирическое уравнение регрессии: @analysis.RegressionFunction</p>
			<p>Коэффициент детерминации: @analysis.Determination</p>
			<p>@analysis.Adequacy</p>
		</div>
	}
</div>

<div class="" style="display: flex; justify-content: flex-start">
	<PlotlyChart style="height: 80vh; min-height: 350px; min-width: 100vh; width: 90%"
	             @bind-Config="config" @bind-Layout="layout" @ref="chart2"/>
</div>

@code {
	private string XsInput;
	private string YsInput;
	private double[] Xs;
	private double[] Ys;
	private double a = 0.05;
	private string[,] ns;
	private bool clicked;
	private MathStatistics.NonlinearDependenciesTable analysis;
	PlotlyChart chart;
	PlotlyChart chart2;
	
	Config config = new Config
	{
		Responsive = true
	};

	Layout layout = new Layout();
	private void Magic()
	{
		var xString = XsInput.Replace(" ", "").Split(";");
		var yString = YsInput.Replace(" ", "").Split(";");
		Xs = Array.ConvertAll(xString, Utils.StringToDouble);
		Ys = Array.ConvertAll(yString, Utils.StringToDouble);
		clicked = true;
		// ns = new string[XsInput.Length,YsInput.Length];
		ns  = new[,]{{"0", "0", "0", "1", "4"}, {"0", "3", "6", "4", "1"}, {"1", "3", "2", "0", "1"}, {"3", "0", "1", "0", "0"}};
	}

	private async Task CalcAndDraw(string xs, string ys, string[,] ns, double a)
	{
		try
		{
			analysis = await Service.GetNonlinearDependenciesTableAsync(xs, ys, ns, a);
			
		}
		catch (AggregateException)
		{
			return;;
		}
		
		await chart.AddTrace(new Scatter
		{
			Name = "Исходные данные",
			X = analysis.Xs,
			Y = analysis.Ys,
			XAxis = "X",
			YAxis = "Y"
		});

		await chart.AddTrace(new Scatter
		{
			Name = "Уравнение регрессии",
			Mode = ModeFlag.Markers,
			X = analysis.Xfs,
			Y = analysis.Yfs,
			XAxis = "X",
			YAxis = "Y"
		});

		await chart2.AddTrace(new Scatter
		{
			Name = "Исходные данные",
			X = analysis.Xs,
			Y = analysis.Ys,
			XAxis = "X",
			YAxis = "Y"
		});

		await chart2.AddTrace(new Scatter
		{
			Name = "Уравнение регрессии",
			X = analysis.Xs,
			Y = analysis.Fxs,
			XAxis = "X",
			YAxis = "Y"
		});
	}
}