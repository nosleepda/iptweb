@page "/nonlinearDependenciesTable"
@using WebApplication.Data
@using Plotly.Blazor.Traces.ScatterLib

@inject Service Service

<div class="left62">
	<h1>Нелинейная зависимость</h1>
	<label>Первый набор данных: <input class="long-input" @bind="XsInput"/></label><br>
	<label>Второй набор данных: <input class="long-input" @bind="YsInput"/></label>
	<label style="display:block;">Точность: <input class="short-input" type="number" @bind="a"/></label>
	<div class="button-box">
		<button type="button" class="btn btn-primary" @onclick="Magic">Продолжить</button>
		<button type="button" class="btn btn-primary" disabled="@(!clicked)" @onclick="async () => await CalcAndDraw()">Вычислить</button>
	</div>
</div>

@if (clicked)
{
	<table class="table left62">
		<thead style="text-align:center">
		<tr>
			<td>y\x</td>
			@foreach (var x in Xs)
			{
				<td>@x</td>
			}
		</tr>
		</thead>
		<tbody>
		@for (var i = 0; i < Ys.Length; i++)
		{
			// see https://stackoverflow.com/a/56426146/323447
			var iCopy = i;
			<tr>
				<label style="margin:16px auto auto 12px; ">@Ys[i]</label>
				@for (var j = 0; j < Xs.Length; j++)
				{
					var jCopy = j;

					<td class="td-matrix">
						<input class="input-matrix" type="number" id="@($"ns{i}{j}")" value="@ns[i, j]"
						       @onchange="@(e => ns[iCopy, jCopy] = e.Value.ToString())"/>
					</td>
        @* 					<label for="@($"ns{i}{j}")">@i</label> *@
@*         					<input type="number" id="@($"ns{i}{j}")" value="@ns[i, j]" *@
@*         					       @onchange="@(e => ns[iCopy, jCopy] = e.Value.ToString())"/> *@
				}
			</tr>
		}
		</tbody>
	</table>
}


<div class="" style="display: flex; justify-content: flex-start">
	<div style="display: flex; flex-direction: column">
		<h2 class="left62">Графики:</h2>
		<PlotlyChart style="height: 60vh; min-height: 350px; min-width: 100vh; width: 100px"
		             @bind-Config="config" @bind-Layout="layout" @ref="chart"/>
	</div>
	@if (analysis == null)
	{
		<div></div>
	}
	else if (analysis == null && clicked)
	{
		<div>Загрузка...</div>
	}
	else
	{
		<div class="result-box">
			<h2>Результат: </h2>
			<div>
				<p>Среднее значение Х: <span>@analysis.MeanX</span></p>
				<p>Среднее значение Y: <span>@analysis.MeanY</span></p>
				<p>Значение Sx: <span>@analysis.Sx</span></p>
				<p>Значение Sy: <span>@analysis.Sy</span></p>
				<p>Коэффициент корреляции: <span>@analysis.CorrelationRatio</span></p>
				<p>Уравнение регрессии:<span>@analysis.RegressionFunction</span></p>
				<p>Коэффициент детерминации: <span>@analysis.Determination</span></p>
				<p><span>@analysis.Adequacy</span></p>
			</div>
		</div>
	}
</div>

<div class="" style="display: flex; justify-content: flex-start">
	<PlotlyChart style="height: 80vh; min-height: 350px; min-width: 100vh; width: 90%"
	             @bind-Config="config" @bind-Layout="layout" @ref="chart2"/>
</div>

@code {
	private string XsInput = "5.0; 10.0; 15.0; 20.0; 25.0";
	private string YsInput = "10.0; 11.0; 12.0; 13.0";
	private double[] Xs;
	private double[] Ys;
	private double a = 0.05;
	private string[,] ns;
	private bool clicked;
	private MathStatistics.NonlinearDependenciesTable analysis;
	PlotlyChart chart;
	PlotlyChart chart2;
	
	Config config = new Config
	{
		Responsive = true
	};

	Layout layout = new Layout();
	private void Magic()
	{
		Xs = Utils.StringToNumber(XsInput);
		Ys = Utils.StringToNumber(YsInput);
		clicked = true;
		// ns = new string[XsInput.Length,YsInput.Length];
		ns  = new[,]{{"0", "0", "0", "1", "4"}, {"0", "3", "6", "4", "1"}, {"1", "3", "2", "0", "1"}, {"3", "0", "1", "0", "0"}};
	}

	private async Task CalcAndDraw()
	{
		try
		{
			analysis = await Service.GetNonlinearDependenciesTableAsync(XsInput, YsInput, ns, a);
			
		}
		catch (AggregateException)
		{
			return;;
		}
		
		await chart.AddTrace(new Scatter
		{
			Name = "Исходные данные",
			X = analysis.Xs,
			Y = analysis.Ys,
			XAxis = "X",
			YAxis = "Y",
			Marker = new Marker{Color = "#33126F"}
		});

		await chart.AddTrace(new Scatter
		{
			Name = "Уравнение регрессии",
			Mode = ModeFlag.Markers,
			X = analysis.Xfs,
			Y = analysis.Yfs,
			XAxis = "X",
			YAxis = "Y",
			Marker = new Marker{Color = "#902CA5"}
		});

		await chart2.AddTrace(new Scatter
		{
			Name = "Исходные данные",
			X = analysis.Xs,
			Y = analysis.Ys,
			XAxis = "X",
			YAxis = "Y",
			Marker = new Marker{Color = "#33126F"}
		});

		await chart2.AddTrace(new Scatter
		{
			Name = "Уравнение регрессии",
			X = analysis.Xs,
			Y = analysis.Fxs,
			XAxis = "X",
			YAxis = "Y",
			Marker = new Marker{Color = "#902CA5"}
		});
	}
}