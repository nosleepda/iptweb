@page "/statistics"

@using Plotly.Blazor.Traces.ScatterLib
@using Plotly.Blazor.Traces.ScatterLib.LineLib
@using WebApplication.Data
@using MathStatistics

@inject Service Service
@inject IJSRuntime JsRuntime;

<div class="left62">
	<h1>Описательная статистика</h1>
	<label>Исходные данные: <input class="long-input" @bind="_dataInput"/></label>
	<label style="display:block;">Точность: <input class="short-input" type="number" @bind="a"/></label>
	<label style="display:block;">Считать гипотезы: <input type="checkbox" @onchange="eventArgs => AllowHypothesis()"/></label>
	<div class="button-box">
		<button type="button" class="btn btn-primary " @onclick="async () => await CalcAndDraw(_dataInput, a)">Вычислить</button>
		<button type="button" class="btn btn-primary" @onclick="Clear">Очистить</button>
	</div>
</div>

<div class="" style="display: flex; justify-content: flex-start">
	<div style="display: flex; flex-direction: column">
		<h2 class="left62">Графики:</h2>
		<PlotlyChart style="height: 60vh; min-height: 350px; min-width: 100vh; width: 100px"
		             @bind-Config="config" @bind-Layout="layout1" @ref="_histogram"/>
		<PlotlyChart style="height: 60vh; min-height: 350px; min-width: 100vh; width: 100px"
        	             @bind-Config="config" @bind-Layout="layout2" @ref="_distributionFunction"/>
	</div>

	@if (_statistic == null)
	{
		<div></div>
	}
	else if (_statistic == null && _isClicked)
	{
		<div>Загрузка...</div>
	}
	else
	{
		<div class="result-box">
			<h2>Результат: </h2>
			<div>
				<p>СРЕДНЕЕ ЗНАЧЕНИЕ: <span>@_statistic.Mean</span></p>
				<p>ДИСПЕРСИЯ: <span >@_statistic.Variance</span></p>
				<p>СТАНДАРТНОЕ ОТКЛОНЕНИЕ: <span >@_statistic.StandardDeviation</span></p>
				<p>МОДА: <span >@_statistic.Mode</span></p>
				<p>МЕДИАНА: <span >@_statistic.Median</span></p>
				<p>КОЭФФИЦИЕНТ ВАРИАЦИИ: <span >@_statistic.CoefficientVariation</span></p>
				<p>КОЭФФИЦИЕНТ ЭКСЦЕССА: <span >@_statistic.Kurtosis</span></p>
				<p>КОЭФФИЦИЕНТ АССИМЕТРИИ: <span >@_statistic.Skewness</span></p>
				<p>ДОВЕРИТЕЛЬНЫЙ ИНТЕРВАЛ: <span >@_statistic.ConfidenceIntervalMean</span></p>
				<p>ДОВЕРИТЕЛЬНЫЙ ИНТЕРВАЛ: <span >@_statistic.ConfidenceIntervalVariance</span></p>
			</div>
			@if (_allowHypothesis && _hypothesis != null)
			{
				<div class="">
					<p><span >@_hypothesis.ChiSquared</span></p>
					<p><span >@_hypothesis.Kolmogorov</span></p>
					<p><span >@_hypothesis.Romanovsky</span></p>
					<p><span >@_hypothesis.Yastremsky</span></p>
					<p><span >@_hypothesis.Approximate</span></p>
				</div>
			}
		</div>
	}
</div>

@if (_allowHypothesis && _hypothesis != null)
{
	<div class="" style="display: flex; justify-content: flex-start">
		<PlotlyChart style="height: 60vh; min-height: 350px; min-width: 100vh; width: 100px"
		             @bind-Config="config" @bind-Layout="layout3" @ref="_diffFreqExt"/>
	</div>
}

@code {

	private string _dataInput = "21.0; 29.0; 27.0; 29.0; 27.0; 29.0; 31.0; 29.0; 31.0; 29.0; 29.0; 23.0; 39.0;" +
	                            "31.0; 29.0; 31.0; 29.0; 31.0; 29.0; 31.0; 33.0; 31.0; 31.0; 31.0; 27.0; 23.0;" +
	                            "27.0; 33.0; 29.0; 25.0; 29.0; 19.0; 29.0; 31.0; 23.0; 31.0; 29.0; 27.0; 33.0;" +
	                            "29.0; 31.0; 29.0; 31.0; 23.0; 35.0; 27.0; 29.0; 29.0; 27.0; 29.0; 29.0; 21.0;" +
	                            "29.0; 27.0; 29.0; 29.0; 29.0; 33.0; 29.0; 25.0; 25.0; 27.0; 31.0; 29.0; 29.0;" +
	                            "27.0; 33.0; 29.0; 31.0; 29.0; 29.0; 29.0; 35.0; 27.0; 29.0; 35.0; 29.0; 33.0;" +
	                            "29.0; 27.0; 31.0; 31.0; 27.0; 29.0; 35.0; 27.0; 33.0; 29.0; 27.0; 29.0; 25.0;" +
	                            "27.0; 31.0; 37.0; 25.0; 31.0; 27.0; 27.0; 29.0; 25.0";

	private double a = 0.05;
	private bool _isClicked;
	private bool _allowHypothesis;
	private PlotlyChart _histogram;
	private PlotlyChart _distributionFunction;
	private PlotlyChart _diffFreqExt;
	private DescriptiveStatistics _statistic;
	private Hypothesis _hypothesis;

	Config config = new Config
	{
		Responsive = true
	};

	Layout layout1 = new Layout
	{
		Title = new Title
		{
			Text = "Полигон частот и гистограмма"
		},
	};

	Layout layout2 = new Layout
	{
		Title = new Title
		{
			Text = "Кумулятивная кривая"
		}
	};

	Layout layout3 = new Layout
	{
		Title = new Title
		{
			Text = "Сравнительный график распределений"
		}
	};

	private async Task ShowEmptyError()
	{
		await JsRuntime.InvokeAsync<bool>("alert", $"Поле ввода не может быть пустым!");
	}

	private async Task CalcAndDraw(string data, double a)
	{
		_isClicked = true;
		try
		{
			if (data == null)
			{
				await JsRuntime.InvokeVoidAsync("alert", "Поле ввода не может быть пустым!");
				return;
			}
			var dataDouble = Utils.StringToNumber(data);

			if (dataDouble.Length < 3)
			{
				await JsRuntime.InvokeVoidAsync("alert", $"Длина данных должна быть не меньше трёх.");
				return;
			}

			_statistic = await Service.GetStatisticsAsync(dataDouble, a);
			if (_allowHypothesis && dataDouble.Length > 40)
			{
				_hypothesis = await Service.GetHypothesisAsync(dataDouble, a);
			}
		}
		catch (AggregateException)
		{
			return;
		}

		await _histogram.AddTrace(new Scatter
		{
			Name = "Исходные данные",
			Mode = ModeFlag.Lines,
			X = _statistic.Data.DiscreteObj,
			Y = _statistic.Data.FrequenciesDiscreteObj,
			Line = new Line {Shape = ShapeEnum.Spline, Smoothing = 1},
			Marker = new Marker{Color = "#33126F"}
		});

		await _histogram.AddTrace(new Bar
		{
			Name = "Уравнение регрессии",
			X = _statistic.Data.DiscreteObj,
			Y = _statistic.Data.FrequenciesDiscreteObj,
			Marker = new Plotly.Blazor.Traces.BarLib.Marker{Color = "#902CA5"}
		});

		await _distributionFunction.AddTrace(new Scatter
		{
			Name = "Исходные данные",
			Mode = ModeFlag.Lines,
			Y = _statistic.CumulateObj,
			Line = new Line {Shape = ShapeEnum.Spline, Smoothing = 1},
			Marker = new Marker{Color = "#33126F"}
		});

		await _distributionFunction.AddTrace(new Bar
		{
			Name = "Уравнение регрессии",
			Y = _statistic.CumulateObj,
			Marker = new Plotly.Blazor.Traces.BarLib.Marker{Color = "#902CA5"}
		});

		if (_allowHypothesis && _hypothesis != null)
		{
			await _diffFreqExt.AddTrace(new Scatter
			{
				Name = "Исходные данные",
				Mode = ModeFlag.Lines,
				Y = _statistic.Data.FrequenciesDiscreteObj,
				Line = new Line {Shape = ShapeEnum.Spline, Smoothing = 1},
				Marker = new Marker{Color = "#33126F"}
			});

			await _diffFreqExt.AddTrace(new Scatter
			{
				Name = "Исходные данные",
				Mode = ModeFlag.Lines,
				Y = _hypothesis.FrequenciesDiscreteExpObj,
				Line = new Line {Shape = ShapeEnum.Spline, Smoothing = 1},
				Marker = new Marker{Color = "#902CA5"}
			});
		}
	}

	private async Task Clear()
	{
		_statistic = null;
		_hypothesis = null;
		_dataInput = null;
		a = 0.05;
		if (_histogram != null) await _histogram.Clear();
		if (_distributionFunction != null) await _distributionFunction.Clear();
		if (_diffFreqExt != null) await _diffFreqExt.Clear();
	}

	private void AllowHypothesis()
	{
		_allowHypothesis = true;
	}

}