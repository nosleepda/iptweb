@page "/statistics"

@using Plotly.Blazor.Traces.ScatterLib
@using Plotly.Blazor.Traces.ScatterLib.LineLib
@using WebApplication.Data

@inject Service Service

<h3>Statistics</h3>

<p>
	<input @bind="DataInput"/>
	<input type="number" @bind="a"/>
	<button type="button" class="btn btn-primary" @onclick="() => CalcAndDraw(DataInput, a)">Draw</button>
	<button type="button" class="btn btn-primary" @onclick="Clear">Clear</button>
</p>

<div class="" style="display: flex; justify-content: flex-start">
	<PlotlyChart style="height: 60vh; min-height: 350px; min-width: 100vh; width: 100px"
	             @bind-Config="config" @bind-Layout="layout" @ref="_histogram"/>

	@if (_statistic == null)
	{
		<div>Loading...</div>
	}
	else if (_statistic == null && IsClicked)
	{
		<div>Loading2...</div>
	}
	else
	{
		<div>
			<div class="">
				<p>Среднее значение Х: @_statistic.Mean</p>
				<p>Среднее значение Y: @_statistic.Variance</p>
				<p>Значение Sx: @_statistic.StandardDeviation</p>
				<p>Значение Sy: @_statistic.Mode</p>
				<p>Коэффициент корреляции: @_statistic.Median</p>
				<p>Значимость: @_statistic.CoefficientVariation</p>
				<p>@_statistic.Kurtosis</p>
				<p>Эмпирическое уравнение регрессии Y на X: @_statistic.Skewness</p>
				<p>Эмпирическое уравнение регрессии X на Y: @_statistic.ConfidenceIntervalVariance</p>
				<p>@_statistic.ConfidenceIntervalMean</p>
			</div>
			<div class="">
				<p>@_statistic.ChiSquared</p>
				<p>@_statistic.Kolmogorov</p>
				<p>@_statistic.Romanovsky</p>
				<p>@_statistic.Yastremsky</p>
				<p>@_statistic.Approximate</p>
			</div>
		</div>
	}
</div>

<div class="" style="display: flex; justify-content: flex-start">
	<PlotlyChart style="height: 60vh; min-height: 350px; min-width: 100vh; width: 100px"
	             @bind-Config="config" @bind-Layout="layout" @ref="_distributionFunction"/>
</div>
<div class="" style="display: flex; justify-content: flex-start">
	<PlotlyChart style="height: 60vh; min-height: 350px; min-width: 100vh; width: 100px"
	             @bind-Config="config" @bind-Layout="layout" @ref="_diffFreqExt"/>
</div>

@code {
	private string DataInput;
	private double a = 0.05;
	private bool IsClicked;
	private PlotlyChart _histogram;
	private PlotlyChart _distributionFunction;
	private PlotlyChart _diffFreqExt;
	private MathStatistics.Hypothesis _statistic;

	Config config = new Config
	{
		Responsive = true
	};

	Layout layout = new Layout
	{
	// // Title = new Title
	// // {
	// //     Text = "Scatter"
	// // },
	// YAxis = new List<YAxis>
	// {
	//     new YAxis
	//     {
	//         Title = new Plotly.Blazor.LayoutLib.YAxisLib.Title
	//         {
	//             Text = "Y"
	//         }
	//     }
	// },
	// XAxis = new List<XAxis>
	// {
	//     new XAxis
	//     {
	//         Title = new Plotly.Blazor.LayoutLib.XAxisLib.Title
	//         {
	//             Text = "X"
	//         }
	//     }
	// }
	};

	private async Task CalcAndDraw(string data, double a)
	{
		IsClicked = true;
		try
		{
			_statistic = await Service.GetStatisticsAsync(data, a);
		}
		catch (AggregateException)
		{
			return;
		}

		await _histogram.AddTrace(new Scatter
		{
			Name = "Исходные данные",
			Mode = ModeFlag.Lines,
			X = _statistic.Data.DiscreteObj,
			Y = _statistic.Data.FrequenciesDiscreteObj,
			Line = new Line {Shape = ShapeEnum.Spline, Smoothing = 1}
		});

		await _histogram.AddTrace(new Bar
		{
			Name = "Уравнение регрессии",
			X = _statistic.Data.DiscreteObj,
			Y = _statistic.Data.FrequenciesDiscreteObj,
		});

		await _distributionFunction.AddTrace(new Scatter
		{
			Name = "Исходные данные",
			Mode = ModeFlag.Lines,
			Y = _statistic.CumulateObj,
			Line = new Line {Shape = ShapeEnum.Spline, Smoothing = 1}
		});

		await _distributionFunction.AddTrace(new Bar
		{
			Name = "Уравнение регрессии",
			Y = _statistic.CumulateObj
		});

		await _diffFreqExt.AddTrace(new Scatter
		{
			Name = "Исходные данные",
			Mode = ModeFlag.Lines,
			Y = _statistic.Data.FrequenciesDiscreteObj,
			Line = new Line {Shape = ShapeEnum.Spline, Smoothing = 1}
		});

		await _diffFreqExt.AddTrace(new Scatter
		{
			Name = "Исходные данные",
			Mode = ModeFlag.Lines,
			Y = _statistic.FrequenciesDiscreteExpObj,
			Line = new Line {Shape = ShapeEnum.Spline, Smoothing = 1}
		});
	}

	private async Task Clear()
	{
		await _histogram.Clear();
		_statistic = null;
		DataInput = null;
		a = 0;
	}

}